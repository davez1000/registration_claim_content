<?php

/**
 * @file
 * Contains registration_claim_content.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function registration_claim_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the registration_claim_content module.
    case 'help.page.registration_claim_content':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Claim created content on registration or log in.') . '</p>';
      $output .= '<p>' . t('This also provides a hook for when the content is beig updated to make') . '</p>';
      return $output;

    default:
  }
}

/**
 * User Login or register alter form.
 *
 * @param array $form
 *   Array of form items.
 * @param FormStateInterface $form_state
 *   Form state of registration form.
 *
 *   Implements hook_form_FORM_ID_alter().
 */
function registration_claim_content_form_user_login_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Alter login form and add own custom submit handler.
  $config = \Drupal::service('config.factory')->get('registration_claim_content.adminRegistrationClaimContent')->get();
  if (!empty($config['select_content_type']) && !empty($config['cookie_expiry'])) {
    // Add extra submit to the form.
    $form['#submit'][] = 'registration_claim_content_form_submit_alter';
  }
}

/**
 * User Login alter form.
 *
 * @param array $form
 *   Array of form items.
 * @param FormStateInterface $form_state
 *   Form state of registration form.
 */
function registration_claim_content_form_submit_alter(array &$form, FormStateInterface $form_state) {
  $uid = \Drupal::currentUser()->id();
  claim_node($uid);
}

/**
 * User insert hook for adding nodes to user on registration.
 *
 * @param EntityInterface $entity
 *
 *   Implements hook_ENTITY_TYPE_insert().
 */
function registration_claim_content_user_insert(EntityInterface $entity) {
  $uid = $entity->id();
  claim_node($uid);
}

/**
 * The function that handles updating nodes on login or registration.
 *
 * @param int $uid
 *   This is the User id.
 */
function claim_node($uid) {
  // Check for User id.
  if (isset($uid) && $uid !== 0) {
    $config = \Drupal::service('config.factory')->get('registration_claim_content.adminRegistrationClaimContent')->get();
    if (!empty($config['select_content_type']) && !empty($config['cookie_expiry'])) {
      // Clame the cookies here.
      $cookie_name = 'registration_claim_content';
      if (!empty($config['cookie_name'])) {
        $cookie_name = $config['cookie_name'];
      }

      if (isset($_COOKIE[$cookie_name]) && !empty($uid)) {
        $cookie_value = explode(',', $_COOKIE[$cookie_name]);
        // Update the content types.
        // Get a node storage object.
        $node_storage = \Drupal::entityManager()->getStorage('node');

        // Load multiple nodes.
        $nodes = $node_storage->loadMultiple($cookie_value);
        if (!empty($nodes) && is_array($nodes)) {
          foreach ($nodes as $node) {
            $owner_id = (int) $node->getOwnerId();
            if ($owner_id == 0) {
              // Yes claim the not for this user.
              $node->setOwnerId($uid);
              // invokeAll so other modules can do stuff to the node.
              \Drupal::moduleHandler()->invokeAll('registration_claim_content_node_update', [$node]);
              $node->save();
            }
          }
        }
        setrawcookie('registration_claim_content', '', REQUEST_TIME - 3600, '/');
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function registration_claim_content_node_insert(EntityInterface $node) {

  // Do not run this from CLI.
  if (php_sapi_name() == 'cli') {
    return;
  }

  $uid = \Drupal::currentUser()->id();
  if ($uid == 0) {
    $config = \Drupal::service('config.factory')->get('registration_claim_content.adminRegistrationClaimContent')->get();
    if (!empty($config['select_content_type']) && !empty($config['cookie_expiry'])) {
      $cookie_name = 'registration_claim_content';
      if (!empty($config['cookie_name'])) {
        $cookie_name = $config['cookie_name'];
      }
      // Get the content type.
      $content_type = $node->getType();
      if (in_array($content_type, $config['select_content_type'])) {
        $node_id = $node->id();
        // Set Cookie.
        $cookie_value = [];
        // Check if the cookie exist.
        if (isset($_COOKIE[$cookie_name])) {
          $cookie_value = explode(',', $_COOKIE[$cookie_name]);
        }
        // Add node id to the array.
        $cookie_value[] = $node_id;
        $value = implode(',', $cookie_value);
        // Set the cookie.
        $expire = time() + (int) $config['cookie_expiry'];
        setcookie($cookie_name, $value, $expire, '/');
      }
    }
  }
}

/**
 * Implements hook_hook_info().
 */
function registration_claim_content_hook_info() {
  // See registration_claim_content.api.php.
  $hooks = ['registration_claim_content_node_update'];
  return array_fill_keys($hooks, ['group' => 'registration_claim_content']);
}
